@page "/groups"
@using System.Security.Claims
@using BlazorChatWasm.Models.DTOs
@attribute [Authorize]
<div class="row">
    <div class="col-lg-6 ">
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <strong>@ErrorMessage</strong>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        <div>
            <div>
                <div class="px-3"><h3>Groups</h3></div>

                <div>
                    <a href="groups/create?ReturnUrl=/groups" class="btn btn-link text-decoration-none d-flex align-items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                        </svg>
                        <span class="px-2 mb-1"> Create New Group?</span>

                    </a>
                </div>
                <div>
                    <a href="groups/join?ReturnUrl=groups" class="btn btn-link  text-decoration-none d-flex align-items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-patch-plus" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 5.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 .5-.5" />
                            <path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911z" />
                        </svg>
                        <span class="px-2 mb-1">Join Group?</span>

                    </a>
                </div>
            </div>

            @foreach (var group in UserGroups)
            {
                <div class="card my-2">
                    <h5 class="card-header">@group.Name</h5>
                    <div class="card-body">
                        <h5 class="card-title"><img src="@group.ImageUrl" width="40" height="40" style="border-radius:40%" /></h5>
                        <p class="card-text">@group.Description</p>
                        <button class="btn btn-outline-info w-20 me-3" @onclick="()=> ShowModal(group.Id)">View Group</button>
                        @if (!IsLoading)
                        {
                            <button class="btn btn-outline-danger w-20" @onclick="()=> LeaveGroupAsync(group.Id)">Leave Group</button>

                        }

                    </div>
                </div>
            }
        </div>




    </div>
    @*
        <div class="col-lg-6">
        <div>
            <div class="px-3"><h3>Group Requests</h3></div>
            <div>
                <a href="groups/requests/status?ReturnUrl=groups" class="btn btn-link d-flex text-decoration-none align-items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-add" viewBox="0 0 16 16">
                        <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0m-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0M8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4" />
                        <path d="M8.256 14a4.5 4.5 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10q.39 0 .74.025c.226-.341.496-.65.804-.918Q8.844 9.002 8 9c-5 0-6 3-6 4s1 1 1 1z" />
                    </svg>
                    <span class="px-3 mb-1">View Requests Status?</span>

                </a>
            </div>
        </div>
        <div>
            @foreach (var request in GroupRequests)
            {
                if (request == null)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card my-2">
                        <h5 class="card-header">@request.Sender.UserName</h5>
                        <div class="card-body">
                            <h5 class="card-title"><img src="@request.Sender.ImageUrl" width="40" height="40" style="border-radius:40%" />@request.Sender.Email</h5>
                            @* <p class="card-text">@user.Bio</p>
                            <button class="btn btn-outline-info w-20 me-2" @onclick="()=>ShowUserModal(request.SenderId)">View Profile</button>
                            @if (!IsLoading)
                            {
                                <button class="btn btn-outline-success w-25 me-3" @onclick="()=> AcceptAsync(request.Sender)">Accept</button>

                                <button class="btn btn-outline-danger w-25" @onclick="()=> RejectAsync(request.SenderId)">Reject</button>

                            }
                            else
                            {
                                <button class="btn btn-outline-success w-25 me-3">
                                    <div class="spinner-grow spinner-grow-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </button>

                                <button class="btn btn-outline-danger w-25">
                                    <div class="spinner-grow spinner-grow-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </button>
                            }

                        </div>
                    </div>
                }
            }
        </div>
    </div>
    *@
    
</div>
@code {
    public bool IsLoading;

    List<Group> UserGroups = new List<Group>();
    List<GroupRequest> GroupRequests = new List<GroupRequest>();

    private string? ErrorMessage;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    //TODO: Add group invites
    private void ShowModal(int groupId)
    {
        var parameters = new ModalParameters();
        parameters.Add("GroupId", groupId);
        Modal.Show<GroupModal>("Group", parameters);

    }
    
    protected override async Task OnInitializedAsync()
    {
        IsLoading = false;
        var userId = (await AuthProvider.GetAuthenticationStateAsync()).User.Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value;

        UserGroups = (await groupService.GetGroupsAsync(userId))!;
    }
    private async Task LeaveGroupAsync(int groupId)
    {
        IsLoading = true;
        if (ErrorMessage != null)
        {
            IsLoading = false;
            return;
        }
        ErrorMessage = null;
        if (AuthProvider is CustomAuthenticationStateProvider customAuthProvider)
        {
            var result = await groupService.LeaveGroupAsync(groupId);

            if (result.Succeeded)
            {
                await JS.InvokeVoidAsync("alert", $"Left group Successfully");
                UserGroups.RemoveAll(g => g.Id == groupId);
            }
            else
            {
                ErrorMessage = result.Errors![0];
            }
        }
        IsLoading = false;
        StateHasChanged();
    }


    private void ShowUserModal(string userId)
    {
        var parameters = new ModalParameters();
        parameters.Add("UserId", userId);
        Modal.Show<UserModal>("Profile", parameters);

    }
    // private async Task AcceptAsync(ApplicationUser sender)
    // {
    //     IsLoading = true;

    //     if (ErrorMessage != null)
    //     {
    //         IsLoading = false;
    //         return;
    //     }
    //     ErrorMessage = null;
    //     if (AuthProvider is CustomAuthenticationStateProvider customAuthProvider)
    //     {
    //         var result = await friendRequestService.AcceptAsync(sender.Id);
    //         Console.WriteLine($"{result.Succeeded}");
    //         if (result.Succeeded)
    //         {
    //             await JS.InvokeVoidAsync("alert", $"Added friend Successfully");
    //             GroupRequests.RemoveAll(u => u.SenderId == sender.Id);
    //         }
    //         else
    //         {
    //             ErrorMessage = result.Errors![0];
    //         }
    //     }
    //     IsLoading = false;
    //     StateHasChanged();
    // }
    // private async Task RejectAsync(string senderId)
    // {

    //     if (ErrorMessage != null)
    //     {
    //         IsLoading = false;
    //         return;
    //     }
    //     ErrorMessage = null;
    //     if (AuthProvider is CustomAuthenticationStateProvider customAuthProvider)
    //     {
    //         var result = await friendRequestService.RejectAsync(senderId);

    //         if (result.Succeeded)
    //         {
    //             await JS.InvokeVoidAsync("alert", $"Deleted Friend Request Successfully");
    //         }
    //         else
    //         {
    //             ErrorMessage = result.Errors![0];
    //         }
    //     }
    //     IsLoading = false;
    //     StateHasChanged();
    // }


}
