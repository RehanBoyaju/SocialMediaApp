@page "/chat"
@page "/chat/{ContactId}"
@page "/chat/group/{GroupId:int?}"

@attribute [Authorize]
<PageTitle>Chat</PageTitle>
<AuthorizeView>
    <NotAuthorized>
        <h3>You are not authorized!<a href="Account/Login">Redirect To Login</a></h3>
    </NotAuthorized>
</AuthorizeView>

@if ((string.IsNullOrEmpty(ContactId)) && (GroupId == null || GroupId == 0))
{
    if (Loaded && ChatUsers != null && ChatUsers.Count == 0)
    {
        <div class="btn btn-secondary">
            <a href="friends/add?ReturnUrl=chat">

                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-add" viewBox="0 0 16 16">
                    <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0m-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0M8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4" />
                    <path d="M8.256 14a4.5 4.5 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10q.39 0 .74.025c.226-.341.496-.65.804-.918Q8.844 9.002 8 9c-5 0-6 3-6 4s1 1 1 1z" />
                </svg>

                Add Friends?

            </a>
        </div>
        <div class="d-flex align-items-center">
            <em>No friends found</em>


        </div>
    }
    else if (!Loaded || Contact == null || !string.IsNullOrEmpty(Contact.ImageUrl))
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>

    }
}
else
{
    <div class="d-flex flex-grow-1 flex-row">
        <div class="d-flex flex-column px-4" style="max-height:90vh;min-height:90vh; overflow:auto;">
            <br /><br />

            <div class="d-flex justify-content-between align-items-center ms-2 mb-3">
                Online Friends:
                <span class="btn btn-outline-light">

                    <a href="friends/add?ReturnUrl=chat">

                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-add" viewBox="0 0 16 16">
                            <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0m-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0M8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4" />
                            <path d="M8.256 14a4.5 4.5 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10q.39 0 .74.025c.226-.341.496-.65.804-.918Q8.844 9.002 8 9c-5 0-6 3-6 4s1 1 1 1z" />
                        </svg>


                    </a>
                </span>
            </div>
            <ul class="list-group gap-2">
                @if (ChatUsers != null)
                {
                    @foreach (var user in ChatUsers)
                    {   
                        if (Contact != null && user.Id == Contact.Id)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center" style="background-color:#d3d3d3; transform: scale(1.02)" @onclick="() => LoadUserChatAsync(user.Id)">
                                <div class="d-flex align-items-center justify-content-between gap-2" >
                                    <div class="mr-4 ">
                                        <img src="@user.ImageUrl" alt="pfp" height="50" width="40" loading="eager" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                    </div>
                                    <div>
                                        <p class="mb-0">@user.UserName</p>
                                    </div>
                                </div>
                            </li>
                        }
                        else
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center" style="background-color:#F5F5F5"  @onclick ="() => LoadUserChatAsync(user.Id)">
                                <div class="d-flex align-items-center justify-content-between gap-2">
                                    <div class="mr-4 ">
                                        <img src="@user.ImageUrl" alt="pfp" loading="eager" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                    </div>
                                    <div>
                                        <p class="mb-0">@user.UserName</p>
                                    </div>
                                </div>
                            </li>

                        }

                    }
                }
                else
                {
                    <li><a href="#">Add New User</a> </li>
                }

            </ul>
            <hr class="dropdown-divider" />
            <br /><br />
            <div class="d-flex justify-content-between align-items-center  mb-3 ms-2">
                Groups:
                <span class="btn btn-outline-light ">
                    <a href="groups/join?ReturnUrl=chat">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                        </svg>
                    </a>
                </span>
            </div>
            <ul class="list-group gap-2">
                @if (Groups != null)
                {
                    @foreach (var group in Groups)
                    {

                        if (group.Id != GroupId)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center" style="background-color:#F5F5F5 " @onclick="() => LoadGroupChatAsync(group.Id)">
                                <div class="d-flex align-items-center justify-content-between gap-2">
                                    <div class="mr-4 ">
                                        <img src="@group.ImageUrl" loading="eager"  alt="pfp" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                    </div>
                                    <div>
                                        <p class="mb-0">@group.Name</p>
                                    </div>
                                </div>
                            </li>
                        }
                        else
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center" style="background-color:#d3d3d3; transform: scale(1.05)" @onclick="() => LoadGroupChatAsync(group.Id)">
                                <div class="d-flex align-items-center justify-content-between gap-2">
                                    <div class="mr-4 ">
                                        <img src="@group.ImageUrl" loading="eager" alt="pfp" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                    </div>
                                    <div>
                                        <p class="mb-0">@group.Name</p>
                                    </div>
                                </div>
                            </li>
                        }

                    }
                }
                else
                {
                    <li><i>Loading Group....</i></li>
                }
            </ul>
        </div>
        <div class="d-flex flex-column px-4 flex-grow-1" style="max-height:90vh;min-height:90vh;">
            <nav class="navbar navbar-expand-lg bg-body-secondary">
                <div class="container-fluid">
                    <div class="d-inline-flex align-items-center gap-3 ms-3">
                        @if (ToggleGroupChat)
                        {
                            if (CurrentGroup != null)
                            {
                                <div class="avatar">
                                    <img src="@CurrentGroup.ImageUrl" loading="eager" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                </div>
                                <span>@CurrentGroup.Name</span>
                            }
                            else
                            {
                                <p>Loading..</p>
                            }
                        }
                        else if (!ToggleGroupChat)
                        {
                            if (Contact != null)
                            {
                                <div class="avatar">
                                    <img src="@Contact.ImageUrl" loading="eager" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                </div>
                                <span>@Contact.UserName</span>

                            }
                            else
                            {
                                <p>Loading..</p>
                            }
                        }
                    </div>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <div class="d-flex gap-2" role="search" style="margin-left:auto" onsubmit="Search">
                            <InputText class="form-control me-2" type="search" placeholder="Search Message.." aria-label="Search" @bind-Value="SearchTerm" @oninput="HandleSearchInput" @onkeydown="HandleSearch" />
                            <button @onclick="Search" class="btn btn-primary">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                                </svg>
                            </button>
                            @if (Searching)
                            {
                                <button @onclick="() => {Searching = false; }" class="btn btn-outline-danger">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                        <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
                                    </svg>
                                </button>
                            }
                        </div>
                        <div class="mx-2">
                            <button class="btn btn-primary pt-1" @onclick="()=>EditItem()">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
                                </svg>
                            </button>

                        </div>
                    </div>
                </div>
            </nav>
            <div style="max-height:69vh;min-height:69vh; overflow-y:scroll" id="chatContainer" class="body bg-body-tertiary">
                @if (messages is null)
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
                else
                {
                    @foreach (var msg in Searching ? SearchResults : messages)
                    {
                        if (CurrentUser != null)
                        {
                            if (ToggleGroupChat)
                            {
                                if (CurrentUser != null && msg.FromUserId == CurrentUser.Id)
                                {
                                    <div class="d-flex flex-row " style=" justify-content: flex-end; padding-right:2vw">
                                        <div class="mr-4">
                                            <div class="avatar">
                                                <img src="@CurrentUser.ImageUrl" loading="eager" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                            </div>
                                        </div>
                                        <div>
                                            <p class="mb-0">You</p>
                                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>

                                            <p class="mt-2" style="padding: 15px; background-color: #1976d2 ; border-radius: 5px;">@msg.Message</p>

                                        </div>
                                    </div>
                                }
                                else
                                {

                                    <div class="d-flex flex-row my-4" style="padding-left:2vw">
                                        <div class="mr-4">
                                            <div class="avatar">

                                                <img src="@GetProfileOfGroupMember(msg.FromUserId!)" loading="eager" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                            </div>
                                        </div>
                                        <div>
                                            @* <p class="mb-0">@msg.FromUser.UserName</p> *@
                                            <p class="mb-0">@GetUserName(msg.FromUserId!)</p>

                                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>
                                            <p class="mt-2" style="padding: 15px; background-color: #f4f4f4; border-radius: 5px;">@msg.Message</p>
                                        </div>
                                    </div>
                                }
                            }

                            else
                            {
                                if (msg.FromUserId == CurrentUser.Id)
                                {
                                    <div class="d-flex flex-row " style=" justify-content: flex-end; padding-right:2vw">
                                        <div class="mr-4">
                                            <div class="avatar">
                                                <img src="@CurrentUser.ImageUrl" loading="eager" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                            </div>
                                        </div>
                                        <div>
                                            <p class="mb-0">You</p>
                                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>

                                            <p class="mt-2" style="padding: 15px; background-color: #1976d2 ; border-radius: 5px;">@msg.Message</p>
                                        </div>
                                    </div>
                                }
                                else if (Contact != null)
                                {
                                    <div class="d-flex flex-row my-4" style="padding-left:2vw">
                                        <div class="mr-4">
                                            <div class="avatar">
                                                <img src="@Contact.ImageUrl" loading="eager" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                            </div>
                                        </div>
                                        <div>
                                            <p class="mb-0">@Contact.UserName</p>
                                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>
                                            <p class="mt-2" style="padding: 15px; background-color: #f4f4f4; border-radius: 5px;">@msg.Message</p>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }

                }

            </div>
            <div class="d-flex flex-row px-2 p-3 bg-body-secondary">
                <InputText Placeholder="Enter Your Message..." class="mt-n2 mx-4 flex-grow-1" @bind-Value="CurrentMessage" @oninput="OnInputChanged" @onkeydown="HandleKeyDown" />
                <button type="submit" class="btn btn-primary" @onclick="() => SubmitAsync(CurrentMessage!)">Send</button>
            </div>
        </div>
    </div>
}

@code
{
    [CascadingParameter] public HubConnection? hubConnection { get; set; }
    [Parameter]
    public string? ContactId { get; set; }
    public string? CurrentId { get; set; }
    [Parameter]
    public int? GroupId { get; set; }
    public string? CurrentMessage { get; set; }
    private bool Searching = false;
    public string? SearchTerm = "";

    public List<ChatMessage> SearchResults = new List<ChatMessage>();
    public List<ApplicationUser>? ChatUsers = null;
    private List<ChatMessage>? messages = new List<ChatMessage>();
    public List<Group> Groups = new List<Group>();
    ApplicationUser? Contact = new();
    public Group? CurrentGroup = new();
    ApplicationUser CurrentUser = new ApplicationUser();
    private bool ToggleGroupChat = false;
    private bool Loaded = false;

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    //TODO: Add a loading spinner when loads up to not show the default picture
    //TODO: Administrator can see all the message
    private void EditItem()
    {
        if (ToggleGroupChat && CurrentGroup != null)
        {
            var parameters = new ModalParameters();
            parameters.Add("GroupId", CurrentGroup.Id);

            Modal.Show<GroupModal>("Group", parameters);
        }
        else if (Contact != null)
        {
            var parameters = new ModalParameters();
            parameters.Add("UserId", Contact.Id);

            Modal.Show<UserModal>("Profile", parameters);
        }

    }

    private async Task SubmitAsync(string message)
    {
        if (!string.IsNullOrEmpty(message) && ((Contact != null && !string.IsNullOrEmpty(Contact.Id)) || (CurrentGroup != null && CurrentGroup.Id != 0)))
        {

            if (ToggleGroupChat)
            {
                var groupHistory = new ChatMessage()
                    {
                    //FromUser = CurrentUser,
                        FromUserId = CurrentUser.Id!,
                        Message = message,
                        ToGroupId = GroupId,
                        CreatedDate = DateTime.Now
                    };
                await chatService.SaveMessageAsync(groupHistory);
                CurrentMessage = string.Empty;
                StateHasChanged();
                await hubConnection!.SendAsync("SendMessageAsync", groupHistory, CurrentUser.Email);
            }
            else
            {
                var chatHistory = new ChatMessage()
                    {
                    //FromUser = CurrentUser,
                        FromUserId = CurrentUser.Id!,
                        Message = message,
                        ToUserId = Contact!.Id,
                        CreatedDate = DateTime.Now
                    };
                await chatService.SaveMessageAsync(chatHistory);
                CurrentMessage = string.Empty;
                StateHasChanged();
                await hubConnection!.SendAsync("SendMessageAsync", chatHistory, CurrentUser.Email);
            }

        }
    }


    protected override async Task OnInitializedAsync()
    {
        Loaded = false;
        if (!string.IsNullOrEmpty(SearchTerm))
        {
            Searching = true;
        }
        else
        {
            Searching = false;
        }

        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;
        CurrentId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        GroupId ??= 0;
        if (CurrentId == null)
        {
            Console.WriteLine("Current Id is null");
            NavigationManager.NavigateTo("/account/login");
            return;
        }
        CurrentUser = (await userService.GetUserDetailsAsync(CurrentId!))!;
        if (CurrentUser == null)
        {
            Console.WriteLine($"User is null:{CurrentId}");
            return;
        }

        await GetUsersAsync();
        await GetGroupsAsync();


        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(HttpClient.BaseAddress!, "/signalRHub"))
            .Build();

        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }

        hubConnection.On<ChatMessage, string>("ReceiveMessage", async (message, userName) =>
        {
            if (ToggleGroupChat)
            {
                if (CurrentGroup != null && ((GroupId == message.ToGroupId && CurrentId == message.FromUserId) || (GroupId == message.ToGroupId && CurrentGroup.MemberIds.Contains(CurrentId!))))
                {
                    if (GroupId == message.ToGroupId && CurrentId == message.FromUserId)
                    {
                        messages!.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() { Id = CurrentUser.Id, Email = CurrentUser.Email }, FromUserId = CurrentUser.Id });
                        await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", CurrentGroup.Id, CurrentUser.Id);
                        StateHasChanged();
                    }
                    else
                    {
                        messages!.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = message.FromUser, FromUserId = message.FromUserId });
                    }
                }
            }
            else
            {
                if ((Contact!.Id == message.ToUserId && CurrentUser.Id == message.FromUserId) || (Contact.Id == message.FromUserId && CurrentUser.Id == message.ToUserId))
                {
                    if ((Contact.Id == message.ToUserId && CurrentUser.Id == message.FromUserId))
                    {
                        messages!.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() { Id = CurrentUser.Id, Email = CurrentUser.Email }, FromUserId = CurrentUser.Id });
                        await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", Contact.Id, CurrentUser.Id);
                    }
                    else if ((Contact.Id == message.FromUserId && CurrentUser.Id == message.ToUserId))
                    {
                        messages!.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = message.FromUser, FromUserId = message.FromUserId });
                    }
                    await InvokeAsync(StateHasChanged);
                }
            }
        });

        if (!string.IsNullOrEmpty(ContactId))
        {
            await LoadUserChatAsync(ContactId);
        }

        else if (GroupId.HasValue && GroupId.Value != 0)
        {

            await LoadGroupChatAsync(GroupId.Value);
        }
        else
        {

            if (ChatUsers != null)
            {
                await LoadUserChatAsync(ChatUsers.First().Id);
            }
        }


    }


    protected override void OnAfterRender(bool firstRender)
    {
        Loaded = true;
    }


    private async Task LoadGroupChatAsync(int groupId)
    {
        messages = new List<ChatMessage>();

        Contact = null;
        ToggleGroupChat = true;
        Searching = false;
        CurrentGroup = await groupService.GetGroupByIdAsync(groupId);
        NavigationManager.NavigateTo($"chat/group/{groupId}");
        messages = await groupService.GetGroupConversationAsync(groupId);

    }


    private async Task LoadUserChatAsync(string ContactId)
    {
        messages = new List<ChatMessage>();

        CurrentGroup = null;
        ToggleGroupChat = false;
        Searching = false;
        if (ChatUsers != null)
        {
            Contact = ChatUsers.FirstOrDefault(c => c.Id == ContactId);
        }

        // Console.WriteLine("Contact Details");
        // Console.WriteLine(Contact.UserName);
        // Console.WriteLine(Contact.Email);
        // Console.WriteLine(Contact.Id);

        NavigationManager.NavigateTo($"chat/{ContactId}");
        messages = await chatService.GetConversationAsync(ContactId);

    }


    private async Task GetGroupsAsync()
    {
        if (CurrentId is null) return;
        Groups = (await groupService.GetGroupsAsync(CurrentId))!;
    }


    private async Task GetUsersAsync()
    {
        // ChatUsers = await userService.GetUsersAsync();
        if (!string.IsNullOrEmpty(CurrentId))
        {
            ChatUsers = await friendService.GetFriendsAsync(CurrentId);

        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await JS.InvokeAsync<string>("ScrollToBottom", "chatContainer");


    }


    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(CurrentMessage))
            {
                var messageToSend = CurrentMessage;  // Capture the message
                CurrentMessage = string.Empty;  // Clear input field immediately
                StateHasChanged();  // Update UI
                await SubmitAsync(messageToSend);  // Call the submit method
            }
        }
    }


    private void OnInputChanged(ChangeEventArgs args)
    {
        CurrentMessage = args.Value?.ToString();
    }


    private async Task Search()
    {
        Searching = true;
        if (!string.IsNullOrEmpty(SearchTerm))
        {
            var search = SearchTerm;
            SearchTerm = string.Empty;
            if (ToggleGroupChat)
            {
                SearchResults = await chatService.SearchAsync(search, null, CurrentGroup!.Id);
            }
            else
            {
                SearchResults = await chatService.SearchAsync(search, Contact!.Id, null);
            }
            StateHasChanged();
        }

    }


    private async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {

            await Search();
        }

    }


    private void HandleSearchInput(ChangeEventArgs args)
    {

        SearchTerm = args.Value!.ToString();
    }

    private string GetProfileOfGroupMember(string userId)
    {
        if (CurrentGroup == null)
        {
            return "";
        }
        var groupMember = CurrentGroup.Members.Where(u => u.Id == userId).FirstOrDefault();
        if (groupMember == null)
        {
            return string.Empty;
        }

        var userPfp = groupMember.ImageUrl;
        return userPfp;
    }
    private string GetUserName(string userId)
    {
        if (CurrentGroup == null)
        {
            return "";
        }
        // Console.WriteLine(userId);
        var groupMember = CurrentGroup.Members.Where(u => u.Id == userId).FirstOrDefault();
        if (groupMember == null)
        {
            return string.Empty;
        }
        var userName = groupMember.UserName;
        return userName!;
    }
}
